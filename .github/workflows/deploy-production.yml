name: Deploy to Production
# מערכת ניהול אומדני עלויות רכש - Production Deployment Workflow

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==============================================================================
  # PRE-DEPLOYMENT CHECKS
  # ==============================================================================
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript check
      run: npm run check
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Check build
      run: npm run build
      
    - name: Security audit
      run: npm audit --audit-level moderate
      
    - name: Lint check
      run: |
        if [ -f "package.json" ] && grep -q "lint" package.json; then
          npm run lint
        else
          echo "No lint script found, skipping"
        fi

  # ==============================================================================
  # BUILD DOCKER IMAGE
  # ==============================================================================
  build-docker-image:
    name: Build Production Docker Image
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # ==============================================================================
  # SECURITY SCANNING
  # ==============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-docker-image
    
    permissions:
      security-events: write
      
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-docker-image.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==============================================================================
  # STAGING DEPLOYMENT
  # ==============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker-image, security-scan]
    environment: staging
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.environment == 'staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/procurement-staging
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
          
    - name: Run staging health checks
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
        
    - name: Run staging integration tests
      run: |
        # Add staging-specific integration tests
        echo "Running staging integration tests..."

  # ==============================================================================
  # PRODUCTION DEPLOYMENT
  # ==============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker-image, security-scan, deploy-staging]
    environment: production
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && (github.event_name != 'workflow_dispatch' || github.event.inputs.environment == 'production')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /opt/procurement-production
          ./scripts/backup.sh
          
    - name: Deploy to production server
      id: deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /opt/procurement-production
          
          # Pull latest images
          docker-compose -f docker-compose.production.yml pull
          
          # Deploy with rolling update
          docker-compose -f docker-compose.production.yml up -d --remove-orphans
          
          # Wait for services to be healthy
          timeout 300 bash -c 'until docker-compose -f docker-compose.production.yml ps | grep -q "Up (healthy)"; do sleep 10; done'
          
    - name: Run production health checks
      run: |
        sleep 60
        
        # Basic health check
        curl -f ${{ secrets.PRODUCTION_URL }}/health
        
        # API health check
        curl -f ${{ secrets.PRODUCTION_URL }}/api/dashboard/stats
        
        # Database connectivity check
        curl -f ${{ secrets.PRODUCTION_URL }}/api/procurement-requests?limit=1

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /opt/procurement-production
          
          # Check all services are running
          docker-compose -f docker-compose.production.yml ps
          
          # Check logs for errors
          docker-compose -f docker-compose.production.yml logs --tail=50 app

  # ==============================================================================
  # POST-DEPLOYMENT
  # ==============================================================================
  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            text: "Production Deployment",
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
              fields: [{
                title: 'מערכת ניהול אומדני עלויות רכש',
                value: `Deployment ${{ job.status }} for ${process.env.AS_COMMIT}`,
                short: true
              }]
            }]
          }
          
    - name: Update deployment status
      uses: bobheadxi/deployments@v1
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env_url: ${{ secrets.PRODUCTION_URL }}

  # ==============================================================================
  # ROLLBACK ON FAILURE
  # ==============================================================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    environment: production
    
    steps:
    - name: Rollback production deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /opt/procurement-production
          ./scripts/deploy.sh --rollback
          
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author
        custom_payload: |
          {
            text: "🚨 Production Rollback Executed",
            attachments: [{
              color: 'warning',
              fields: [{
                title: 'מערכת ניהול אומדני עלויות רכש',
                value: `Deployment failed, rollback executed for commit ${process.env.AS_COMMIT}`,
                short: false
              }]
            }]
          }